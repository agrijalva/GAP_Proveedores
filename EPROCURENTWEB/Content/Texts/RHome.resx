<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutDetails" xml:space="preserve">
    <value>Details about your company or personal information</value>
  </data>
  <data name="AboutMessage" xml:space="preserve">
    <value>Your company or personal information</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>address</value>
  </data>
  <data name="BName" xml:space="preserve">
    <value>Business name</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="CellPhone" xml:space="preserve">
    <value>Cell Phone</value>
  </data>
  <data name="CName" xml:space="preserve">
    <value>ContactName</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="ContactEmail" xml:space="preserve">
    <value>Contact Email</value>
  </data>
  <data name="ContactMessage" xml:space="preserve">
    <value>Your contact information</value>
  </data>
  <data name="ContactMessageSendNok" xml:space="preserve">
    <value>Your message has not been sent correctly. Please, try again.</value>
  </data>
  <data name="ContactMessageSendOk" xml:space="preserve">
    <value>Your message has been sent correctly. Thanks.</value>
  </data>
  <data name="ContactName" xml:space="preserve">
    <value>Contact Name</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that enables a clean separation of concerns and gives you full control over markup for enjoyable, agile development.</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="CPhone" xml:space="preserve">
    <value>Phone Contact</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Fax" xml:space="preserve">
    <value>Fax</value>
  </data>
  <data name="FillC" xml:space="preserve">
    <value>Fill the characters</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Languaje</value>
  </data>
  <data name="Marketing" xml:space="preserve">
    <value>Marketing</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Contact Message</value>
  </data>
  <data name="Nacionality" xml:space="preserve">
    <value>Nacionality</value>
  </data>
  <data name="NameOfCompany" xml:space="preserve">
    <value>Name of Company</value>
  </data>
  <data name="NIF" xml:space="preserve">
    <value>NIF</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="ProvP" xml:space="preserve">
    <value>PROVIDERS PORTAL</value>
  </data>
  <data name="RFC" xml:space="preserve">
    <value>RFC</value>
  </data>
  <data name="Subtitle" xml:space="preserve">
    <value>ASP.NET is a free web framework for building great Multi-Language MVC Web sites and Web applications using HTML, CSS and JavaScript.</value>
  </data>
  <data name="Support" xml:space="preserve">
    <value>Support</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>EProcurement</value>
  </data>
  <data name="TitlePP" xml:space="preserve">
    <value>Provider Registration</value>
  </data>
  <data name="TZone" xml:space="preserve">
    <value>Time Zone</value>
  </data>
  <data name="WPage" xml:space="preserve">
    <value>WebPage</value>
  </data>
  <data name="ZipCode" xml:space="preserve">
    <value>Zip Code</value>
  </data>
  <data name="DefaultSelect" xml:space="preserve">
    <value>Choose one</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="ProvType" xml:space="preserve">
    <value>Provider Type</value>
  </data>
  <data name="AXProviderNum" xml:space="preserve">
    <value>AX Provider Number</value>
  </data>
  <data name="Suburb" xml:space="preserve">
    <value>Suburb</value>
  </data>
  <data name="Account" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="Bank" xml:space="preserve">
    <value>Bank</value>
  </data>
  <data name="CLABE" xml:space="preserve">
    <value>CLABE</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
</root>